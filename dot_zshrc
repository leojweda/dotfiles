
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

export HOMEBREW_NO_ANALYTICS=1

if [[ $OSTYPE == linux* ]]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.cache"

export BAT_CONFIG_DIR="${XDG_CONFIG_HOME}/bat"

function get_interface_style() {
  if defaults read -g AppleInterfaceStyle 2>/dev/null | grep -q "Dark"; then
    echo "dark";
  else
    echo "light";
  fi
}

function get_appearance() {
  background_color=$(xtermcontrol --get-bg)

  if [[ $background_color == 'rgb:0000/2b2b/3636' || $background_color == 'rgb:0000/2b2b/3535' ]]; then
    echo 'dark';
  else
    echo 'light';
  fi
}

typeset -A ZSH_HIGHLIGHT_STYLES

function update_appearance() {
  if [[ $OSTYPE == darwin* ]]; then
    new_interface_style=$(get_interface_style)

    if [[ $INTERFACE_STYLE != $new_interface_style ]]; then
      export INTERFACE_STYLE=$new_interface_style

      if [[ $INTERFACE_STYLE == 'dark' ]]; then
        # Ghostty
        old_background_color='FDF6E2'
        new_background_color='002B35'
      else
        # Ghostty
        old_background_color='002B35'
        new_background_color='FDF6E2'
      fi

      sed -i '' "s/^background = ${old_background_color}/#background = ${old_background_color}/" "${XDG_CONFIG_HOME}/ghostty/config"
      sed -i '' "s/^#background = ${new_background_color}/background = ${new_background_color}/" "${XDG_CONFIG_HOME}/ghostty/config"
    fi
  fi

  new_appearance=$(get_appearance)

  if [[ $APPEARANCE == $new_appearance ]]; then
    return
  fi

  export APPEARANCE=$new_appearance

  export LS_COLORS="$(vivid generate solarized-${APPEARANCE})"

  if [[ $APPEARANCE == 'dark' ]]; then
    # Zsh Syntax Highlighting
    zsh_comment_color='240'

    # Tmux
    tmux_background_highlight_color='black'
    tmux_background_color='brightblack'
    tmux_text_color='brightblue'
    tmux_optional_text_color='brightgreen'

    # nano
    nano_body_text_color='lightblue'
    nano_comment_color='lightgreen'
    nano_emphasized_color='lightcyan'
    nano_background_highlight_color='black'
  else
    # Zsh Syntax Highlighting
    zsh_comment_color='245'

    # Tmux
    tmux_background_highlight_color='white'
    tmux_background_color='brightwhite'
    tmux_text_color='brightyellow'
    tmux_optional_text_color='brightcyan'

    # nano
    nano_body_text_color='lightyellow'
    nano_comment_color='lightcyan'
    nano_emphasized_color='lightgreen'
    nano_background_highlight_color='white'
  fi

  ZSH_HIGHLIGHT_STYLES[comment]="fg=${zsh_comment_color}"

  export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=${zsh_comment_color}"

  if [ -n "$TMUX" ]; then
    status_bar_background_color=$tmux_background_highlight_color
    tmux set -g status-style bg=$status_bar_background_color

    status_bar_left_background_color='color136'
    status_bar_left_foreground_color='color230'
    status_bar_left_content="#[fg=${status_bar_left_foreground_color},bg=${status_bar_left_background_color},bold] #S "
    status_bar_left_suffix="#[fg=${status_bar_left_background_color},bg=${status_bar_background_color},nobold,nounderscore,noitalics]"
    tmux set -g status-left "${status_bar_left_content}${status_bar_left_suffix}"

    window_background_color=$status_bar_background_color
    window_prefix_color=$tmux_background_color
    window_prefix="#[fg=${window_prefix_color},bg=${window_background_color},nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}"
    window_content="#[fg=${tmux_text_color},bg=${window_background_color}] #I#F #W"
    tmux setw -g window-status-format "${window_prefix}${window_content}"

    curent_window_background_color=$status_bar_background_color
    current_window_prefix_color=$tmux_background_color
    current_window_prefix="#[fg=${current_window_prefix_color},bg=${curent_window_background_color},nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}#[fg=${curent_window_background_color},bg=${current_window_prefix_color},nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}"
    current_window_content="#[fg=${tmux_text_color},bg=${current_window_prefix_color}] #I#F #[fg=${tmux_text_color},bg=${current_window_prefix_color}] #W "
    current_window_suffix="#[fg=${current_window_prefix_color},bg=${status_bar_background_color},nobold,nounderscore,noitalics]#{?#{==:#{window_index},#{session_windows}},,}"
    tmux setw -g window-status-current-format "${current_window_prefix}${current_window_content}${current_window_suffix}"

    leader_key_indicator_color='blue'
    status_bar_right_suffix="#{?client_prefix,#[fg=${leader_key_indicator_color}]#[bg=${status_bar_background_color}]#[fg=${tmux_background_color}]#[bg=${leader_key_indicator_color}]^; #[fg=${tmux_background_color}]#[bg=${leader_key_indicator_color}],#[fg=${tmux_background_color}]#[bg=${status_bar_background_color}]}"
    status_bar_right_content="#[fg=${tmux_optional_text_color},bg=${tmux_background_color}] #{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}#{pane_current_command} in #(basename \"#{pane_current_path}\")"
    tmux set -g status-right "${status_bar_right_suffix}${status_bar_right_content}"
  fi

  sed -i '' "s|^set keycolor .*|set keycolor ${nano_body_text_color},${nano_background_highlight_color}|" "${XDG_CONFIG_HOME}/nano/nanorc"
  sed -i '' "s|^set numbercolor .*|set numbercolor ${nano_comment_color},${nano_background_highlight_color}|" "${XDG_CONFIG_HOME}/nano/nanorc"
  sed -i '' "s|^set titlecolor .*|set titlecolor ${nano_emphasized_color},${nano_background_highlight_color}|" "${XDG_CONFIG_HOME}/nano/nanorc"
}

update_appearance

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=$HISTSIZE

setopt EXTENDED_HISTORY
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_VERIFY
setopt HIST_BEEP

setopt INTERACTIVE_COMMENTS

alias k9='kill -9'

alias ls='eza --icons --group-directories-first'
alias ll='eza --icons --group-directories-first -l'

alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias -- -='cd -'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias _='sudo'
alias mkdir='mkdir -p'
alias sa='alias | grep -i'

alias o='open'
alias pbc='pbcopy'

# Show/hide hidden files in the Finder
alias showfiles='defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder'
alias hidefiles='defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder'

# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

export FZF_DEFAULT_OPTS='--tmux right,50%'
export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

eval "$(gh copilot alias -- zsh)"

eval "$(zoxide init --cmd cd zsh)"

zinit light zsh-users/zsh-completions
zinit light Aloxaf/fzf-tab
autoload -U compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# TODO: Make the colours match the colours in eza.
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

# Must be loaded before history-substring-search, autosuggestions, and the prompt.
zinit light zsh-users/zsh-syntax-highlighting

# Must be loaded after syntax-highlighting and before augosuggestions and the prompt.
zinit snippet OMZ::plugins/git/git.plugin.zsh
zinit load 'zsh-users/zsh-history-substring-search'
# zinit ice wait atload"_history_substring_search_config"
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Must be loaded after syntax-highlighting, history-substring-search, and the prompt.
zinit light zsh-users/zsh-autosuggestions

zinit load 'djui/alias-tips'

zinit snippet https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/fzf-git.sh
zinit snippet OMZP::colored-man-pages
zinit snippet OMZP::encode64
zinit snippet OMZP::man
zinit snippet OMZP::thefuck
zinit snippet OMZP::tldr
# zinit snippet OMZP::vi-mode

# Makes a directory and changes to it.
function mkdcd {
  [[ -n "$1" ]] && mkdir -p "$1" && builtin cd "$1"
}

# Changes to a directory and lists its contents.
function cdls {
  builtin cd "$argv[-1]" && ls "${(@)argv[1,-2]}"
}

# Deletes .DS_Store and __MACOSX directories.
function osx-rm-dir-metadata {
  find "${@:-$PWD}" \( \
    -type f -name '.DS_Store' -o \
    -type d -name '__MACOSX' \
  \) -print0 | xargs -0 rm -rf
}

# Hook into Zsh's `precmd` to check and update the interface style before each prompt
# precmd_functions+=(update_appearance)

if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh --config ${XDG_CONFIG_HOME}/ohmyposh/base.json)"
fi

ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=green'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=166'
ZSH_HIGHLIGHT_STYLES[function]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[command]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[path]='fg=blue,underline'
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=61'
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=61'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-unclosed]='fg=red,underline'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument-unclosed]='fg=red,underline'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument-unclosed]='fg=red,underline'

# Homebrew Command Not Found
HB_CNF_HANDLER="$(brew --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
if [ -f "$HB_CNF_HANDLER" ]; then
  source "$HB_CNF_HANDLER";
fi

eval "$(mise activate zsh)"
