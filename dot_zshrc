
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

export HOMEBREW_NO_ANALYTICS=1

if [[ $OSTYPE == linux* ]]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.cache"

function get_interface_style() {
  background_color=$(xtermcontrol --get-bg)

  if [[ $background_color == "rgb:0000/2b2b/3636" || $background_color == "rgb:0000/2b2b/3535" ]]; then
    echo "dark";
  else
    echo "light";
  fi
}

typeset -A ZSH_HIGHLIGHT_STYLES

function update_interface_style() {
  export INTERFACE_STYLE=$(get_interface_style)

  export LS_COLORS="$(vivid generate solarized-${INTERFACE_STYLE})"

  # Update dependent variables
  if [[ $INTERFACE_STYLE == "dark" ]]; then
    ZSH_HIGHLIGHT_STYLES[comment]='fg=240'

    export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=240"

    if [[ $OSTYPE == darwin* ]]; then
      sed -i '' 's/^background = FDF6E2/#background = FDF6E2/' ~/.config/ghostty/config
      sed -i '' 's/^#background = 002B35/background = 002B35/' ~/.config/ghostty/config
    elif [[ $OSTYPE == linux* ]]; then
      sed -i 's/^background = FDF6E2/#background = FDF6E2/' ~/.config/ghostty/config
      sed -i 's/^#background = 002B35/background = 002B35/' ~/.config/ghostty/config
    else
      echo "Unsupported OS: ${OSTYPE}" >&2
      exit 1
    fi

    if [ -n "$TMUX" ]; then
      tmux set -g status-style bg='black'

      tmux set -g status-left "#[fg=color230,bg=color136,bold] #S #[fg=colour136,bg=black,nobold,nounderscore,noitalics]"
      tmux setw -g window-status-format "#[fg=brightblack,bg=black,nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}#[fg=brightblue,bg=black] #I#F #[fg=brightblue,bg=black] #W"
      tmux setw -g window-status-current-format "#[fg=brightblack,bg=black,nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}#[fg=black,bg=brightblack,nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}#[fg=brightblue,bg=brightblack] #I#F #[fg=brightblue,bg=brightblack] #W #[fg=brightblack,bg=black,nobold,nounderscore,noitalics]#{?#{==:#{window_index},#{session_windows}},,}"
      tmux set -g status-right "#{?client_prefix,#[fg=blue]#[bg=black]#[fg=brightblack]#[bg=blue]^; #[fg=brightblack]#[bg=blue],#[fg=brightblack]#[bg=black]}#[fg=colour244,bg=brightblack] #{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}#{pane_current_command} in #(basename \"#{pane_current_path}\") "
    fi
  else
    ZSH_HIGHLIGHT_STYLES[comment]='fg=245'

    export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=245"

    if [[ $OSTYPE == darwin* ]]; then
      sed -i '' 's/^background = 002B35/#background = 002B35/' ~/.config/ghostty/config
      sed -i '' 's/^#background = FDF6E2/background = FDF6E2/' ~/.config/ghostty/config
    elif [[ $OSTYPE == linux* ]]; then
      sed -i 's/^background = 002B35/#background = 002B35/' ~/.config/ghostty/config
      sed -i 's/^#background = FDF6E2/background = FDF6E2/' ~/.config/ghostty/config
    else
      echo "Unsupported OS: ${OSTYPE}" >&2
      exit 1
    fi

    if [ -n "$TMUX" ]; then
      tmux set -g status-style bg='white'

      tmux set -g status-left "#[fg=color230,bg=color136,bold] #S #[fg=colour136,bg=white,nobold,nounderscore,noitalics]"
      tmux setw -g window-status-format "#[fg=brightwhite,bg=white]#{?#{==:#{window_index},1},,}#[fg=brightyellow,bg=white] #I#F #[fg=brightyellow,bg=white] #W"
      tmux setw -g window-status-current-format "#[fg=brightwhite,bg=white]#{?#{==:#{window_index},1},,}#[fg=white,bg=brightwhite,nobold,nounderscore,noitalics]#{?#{==:#{window_index},1},,}#[fg=brightyellow,bg=brightwhite] #I#F #[fg=brightyellow,bg=brightwhite] #W #[fg=brightwhite,bg=white,nobold,nounderscore,noitalics]#{?#{==:#{window_index},#{session_windows}},,}"
      tmux set -g status-right "#{?client_prefix,#[fg=blue]#[bg=white]#[fg=brightwhite]#[bg=blue]^; #[fg=brightwhite]#[bg=blue],#[fg=brightwhite]#[bg=white]}#[fg=brightcyan,bg=brightwhite] #{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}#{pane_current_command} in #(basename \"#{pane_current_path}\") "
    fi
  fi
}

update_interface_style

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=$HISTSIZE

setopt EXTENDED_HISTORY
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_VERIFY
setopt HIST_BEEP

setopt INTERACTIVE_COMMENTS

alias k9='kill -9'

alias ls='eza --icons --group-directories-first'
alias ll='eza --icons --group-directories-first -l'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias -- -='cd -'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias _='sudo'
alias mkdir='mkdir -p'
alias sa='alias | grep -i'

alias o='open'
alias pbc='pbcopy'

# Show/hide hidden files in the Finder
alias showfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hidefiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

eval "$(gh copilot alias -- zsh)"

eval "$(zoxide init --cmd cd zsh)"

zinit light zsh-users/zsh-completions
zinit light Aloxaf/fzf-tab
autoload -U compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# TODO: Make the colours match the colours in eza.
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

# Must be loaded before history-substring-search, autosuggestions, and the prompt.
zinit light zsh-users/zsh-syntax-highlighting

# Must be loaded after syntax-highlighting and before augosuggestions and the prompt.
zinit snippet OMZ::plugins/git/git.plugin.zsh
zinit load 'zsh-users/zsh-history-substring-search'
# zinit ice wait atload"_history_substring_search_config"
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Must be loaded after syntax-highlighting, history-substring-search, and the prompt.
zinit light zsh-users/zsh-autosuggestions

zinit load 'djui/alias-tips'

zinit snippet OMZP::dotenv
zinit snippet OMZP::encode64
zinit snippet OMZP::man
zinit snippet OMZP::thefuck
zinit snippet OMZP::tldr
# zinit snippet OMZP::vi-mode

# Makes a directory and changes to it.
function mkdcd {
  [[ -n "$1" ]] && mkdir -p "$1" && builtin cd "$1"
}

# Changes to a directory and lists its contents.
function cdls {
  builtin cd "$argv[-1]" && ls "${(@)argv[1,-2]}"
}

# Deletes .DS_Store and __MACOSX directories.
function osx-rm-dir-metadata {
  find "${@:-$PWD}" \( \
    -type f -name '.DS_Store' -o \
    -type d -name '__MACOSX' \
  \) -print0 | xargs -0 rm -rf
}

# Hook into Zsh's `precmd` to check and update the interface style before each prompt
# precmd_functions+=(update_interface_style)

if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh --config ~/.config/ohmyposh/base.json)"
fi

ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=green'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=166'
ZSH_HIGHLIGHT_STYLES[function]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[command]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[path]='fg=blue,underline'
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=61'
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=61'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-unclosed]='fg=red,underline'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument-unclosed]='fg=red,underline'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument-unclosed]='fg=red,underline'

# Homebrew Command Not Found
HB_CNF_HANDLER="$(brew --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
if [ -f "$HB_CNF_HANDLER" ]; then
  source "$HB_CNF_HANDLER";
fi

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
